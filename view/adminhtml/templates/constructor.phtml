<?php /** @var $block \MageSuite\ContentConstructorAdmin\Block\Adminhtml\ContentConstructor\Constructor */ ?>
<content-constructor
    configurator-endpoint="<?= $block->getConfiguratorEndpointUrl() ?>"
    configuration='<?= str_replace("'", "&#39;", $block->resolveConfigurationMedia($block->getExistingComponentsConfiguration())) ?>'
    configuration-dump="input[name=components]"
    assets-src="<?= $block->getAsset('/') ?>/"
    uploader-url="<?= $block->getUploaderUrl() ?>"
    rest-token-endpoint="<?= $block->getRestTokenEndpoint() ?>"
    image-endpoint="<?= $block->getImageEndpoint() ?>"
    category-data-provider-endpoint="<?= $block->getCategoryDataProviderEndpoint() ?>"
    page-type="<?= $block->getPageType() ?>"
    cc-project-config='<?= str_replace("'", "&#39;", $block->getContentConstructorConfig()) ?>'
    products-per-page='<?= $block->getProductsPerPage() ?>'
    admin-prefix="<?= $block->getAdminPrefix() ?>"
    sorters='<?= str_replace("'", "&#39;", $block->getSorters()) ?>'
    filters='<?= str_replace("'", "&#39;", $block->getFilters()) ?>'
    product-data-endpoint='<?= $block->getProductDataEndpoint() ?>'
>
</content-constructor>


<script>
    (function (doc) {
        var scripts = doc.getElementsByTagName('script');
        var script = scripts[scripts.length - 1];
        var xhr = new XMLHttpRequest();
        xhr.onload = function () {
            var div = doc.createElement('div');
            div.innerHTML = this.responseText;
            div.style.width = div.style.height = 0;
            div.style.position = 'absolute';
            div.style.overflow = 'hidden';
            script.parentNode.insertBefore(div, script);
        };
        xhr.open('get', '<?=$block->getViewFileUrl('MageSuite_ContentConstructorAdmin::images/sprites.svg');?>', true);
        xhr.send();
    })(document)
    // Initialize content constructor using AMD.
    require([
        'jquery',
        'Vue',
        'VueResource',
        'contentConstructor',
        'Magento_Ui/js/modal/modal',
        'mage/adminhtml/wysiwyg/widget',
        'loadingPopup'
    ], function ($, Vue, VueResource, contentConstructor, modal) {
        new Vue({
            el: 'body',
            components: {
                'content-constructor': contentConstructor
            }
        });
    });
</script>

<script>
    function previewContentConstructor(json) {
        requirejs(['jquery'], function ($) {
            var url = "<?= $block->getBaseUrl() ?>content-constructor/preview/view";
            var getTokenUrl = "<?= $block->getPreviewTokenUrl() ?>";
            var $newForm = $('<form>', {
                'action': url,
                'target': '_blank',
                'method': 'POST'
            }).append($('<input>', {
                'name': 'configuration',
                'value': json,
                'type': 'hidden'
            }));
            $newForm.append($('<input>', {
                'name': 'form_key',
                'value': window.FORM_KEY,
                'type': 'hidden'
            }));
            $(document.body).append($newForm);
            jQuery.ajax({
                url: getTokenUrl,
                type: "POST",
                data: {configuration: json},
                success: function (token) {
                    $newForm.append($('<input>', {
                        'name': 'secret_preview_token',
                        'value': token,
                        'type': 'hidden'
                    }));
                    $newForm.submit();
                },
            });
        });
    }

    csWysiwygEditor = undefined;

    openEditorPopup = function(url, name, specs, parent) {
        if ((typeof popups == "undefined") || popups[name] == undefined || popups[name].closed) {
            if (typeof popups == "undefined") {
                popups = new Array();
            }
            var opener = (parent != undefined ? parent : window);
            popups[name] = opener.open(url, name, specs);
        } else {
            popups[name].focus();
        }
        return popups[name];
    }

    closeEditorPopup = function(name) {
        if ((typeof popups != "undefined") && popups[name] != undefined && !popups[name].closed) {
            popups[name].close();
        }
    }
</script>
